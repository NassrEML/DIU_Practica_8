
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 * @author Nassr Eddine Mousati Lamhamdi Yousuf Boutahar El Maachi
 */
public class PrincipalFrame extends javax.swing.JFrame {

    private JFileChooser jdcOriginFolder = new JFileChooser();
    private JFileChooser jdcDestFolder = new JFileChooser();
    public static String rutaOriginal;
    private String rutaDestino;
    private Worker1 worker;

    private void clean() {
        rutaOriginal = null;
        originPath.setText("");
        destinationPath.setText("");
        loadingBar.setString("");
        buttonDestinationPath.setEnabled(false);
        buttonStartZip.setEnabled(false);
        buttonStopZip.setEnabled(false);

    }

    // private mySwingWorker worker;
    /**
     * Creates new form NewJFrame
     */
    public PrincipalFrame() {
        initComponents();
        buttonDestinationPath.setEnabled(false);
        this.setResizable(false);

        buttonStopZip.setEnabled(false);
        buttonStartZip.setEnabled(false);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                closeWindow();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        originPath = new javax.swing.JTextField();
        destinationPath = new javax.swing.JTextField();
        buttonOriginPath = new javax.swing.JButton();
        buttonDestinationPath = new javax.swing.JButton();
        loadingBar = new javax.swing.JProgressBar();
        buttonStartZip = new javax.swing.JButton();
        buttonStopZip = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("DIU - ZIP");

        jLabel3.setText("Carpeta origen:");

        jLabel4.setText("Carpeta destino:");

        originPath.setEditable(false);
        originPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                originPathActionPerformed(evt);
            }
        });

        destinationPath.setEditable(false);

        buttonOriginPath.setText("Seleccionar carpeta origen");
        buttonOriginPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOriginPathActionPerformed(evt);
            }
        });

        buttonDestinationPath.setText("Seleccionar carpeta destino");
        buttonDestinationPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDestinationPathActionPerformed(evt);
            }
        });

        buttonStartZip.setText("Iniciar compresi√≥n");
        buttonStartZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartZipActionPerformed(evt);
            }
        });

        buttonStopZip.setText("Cancelar");
        buttonStopZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopZipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonStartZip)
                .addGap(103, 103, 103)
                .addComponent(buttonStopZip)
                .addGap(161, 161, 161))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(destinationPath))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(originPath, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonOriginPath)
                                    .addComponent(buttonDestinationPath)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(jLabel2)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(originPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonOriginPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(destinationPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonDestinationPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonStopZip)
                            .addComponent(buttonStartZip))
                        .addGap(24, 24, 24))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void originPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_originPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_originPathActionPerformed

    private void buttonOriginPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOriginPathActionPerformed

        jdcOriginFolder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //jdcOriginFolder.showOpenDialog(jdcOriginFolder);

        if (jdcOriginFolder.showOpenDialog(jdcOriginFolder) == JFileChooser.APPROVE_OPTION) {

            //originFolder = jdcOriginFolder.getSelectedFile();
            rutaOriginal = jdcOriginFolder.getSelectedFile().getAbsolutePath();
            originPath.setText(rutaOriginal);

            //String aux = originFolder.getPath().concat(".zip");
            // obteniendo el nombre del archivo comprimido, pj: "micarpeta.zip"
            //String[] rutaDestinoDividida = aux.split("\\\\");
            //nombreDelZip = rutaDestinoDividida[rutaDestinoDividida.length - 1];
            buttonDestinationPath.setEnabled(true);
        }

    }//GEN-LAST:event_buttonOriginPathActionPerformed

    private void buttonStartZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartZipActionPerformed

        if (destinationPath.getText().isEmpty() || originPath.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Seleccione las rutas deseadas", "Cancelar", JOptionPane.ERROR_MESSAGE);

        } else if (rutaOriginal.equals(rutaDestino)) {
            JOptionPane.showMessageDialog(null, "No se admiten rutas equivalentes de origen y destino",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
            destinationPath.setText("");

        } else {
            worker = new Worker1();
            worker.execute();
            buttonStartZip.setEnabled(false);
            buttonStopZip.setEnabled(true);
        }


    }//GEN-LAST:event_buttonStartZipActionPerformed

    private void buttonDestinationPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDestinationPathActionPerformed

        jdcDestFolder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //jdcOriginFolder.showOpenDialog(jdcOriginFolder);

        if (jdcDestFolder.showOpenDialog(jdcDestFolder) == JFileChooser.APPROVE_OPTION) {

            //destinationFolder = jdcDestFolder.getSelectedFile();
            rutaDestino = jdcDestFolder.getSelectedFile().getAbsolutePath();

            if (rutaDestino.equals(rutaOriginal)) {
                JOptionPane.showMessageDialog(null,
                        "No se puede guardar la compresi√≥n en la misma carpeta. Cambie el destino por favor.",
                        "Acci√≥n ilegal", JOptionPane.ERROR_MESSAGE);
                return;
            }

            destinationPath.setText(rutaDestino);

            buttonStartZip.setEnabled(true);

        }

    }//GEN-LAST:event_buttonDestinationPathActionPerformed

    private void buttonStopZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopZipActionPerformed
        worker.finalizado = true;
        worker.comprimiendo = false;
        try {
            worker.stop();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,
                    "Se ha cancelado la compresi√≥n.",
                    "Cancelado", JOptionPane.ERROR_MESSAGE);
        }
        buttonStopZip.setEnabled(false);
        this.clean();
        repaint();
    }//GEN-LAST:event_buttonStopZipActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDestinationPath;
    private javax.swing.JButton buttonOriginPath;
    private javax.swing.JButton buttonStartZip;
    private javax.swing.JButton buttonStopZip;
    private javax.swing.JTextField destinationPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JTextField originPath;
    // End of variables declaration//GEN-END:variables

    private List<File> getAllFiles(File folder) {
        List<File> files = new ArrayList<>();
        for (File file : folder.listFiles()) {
            if (file.isDirectory()) {
                files.addAll(getAllFiles(file));
            } else {
                files.add(file);
            }
        }
        return files;
    }

    private void closeWindow() {
        int exitValue = JOptionPane.showConfirmDialog(null,
                "¬øEst√° seguro de que desea salir de la aplicaci√≥n?.", "Salir",
                JOptionPane.YES_NO_OPTION);
        if (exitValue == JOptionPane.YES_OPTION) {
            System.exit(0);
        } else {
            setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        }

    }

    private String getDirPath(String absolutePath, String rootPath) {
        if (absolutePath.length() <= rootPath.length()) {
            return "";
        }
        for (int i = 0; i < rootPath.length(); i++) {
            if (absolutePath.charAt(i) != rootPath.charAt(i)) {
                return "";
            }
        }
        return absolutePath.substring(rootPath.length() + 1);
    }

    class Worker1 extends SwingWorker<Boolean, Integer> {
        // Esta etiqueta se recibe en el constructor o a trav√©s de un
        // metodo setEtiqueta().

        boolean finalizado = false;
        private boolean comprimiendo;
        public boolean parar = false;
        private FileOutputStream destFolder;
        private String zip;
        private ZipOutputStream out;
        private BufferedInputStream origin;
        private boolean cancelado = false;

        @Override
        protected Boolean doInBackground() throws Exception {
            cancelado = false;
            // Mostramos el nombre del hilo, para ver que efectivamente
            // esto NO se ejecuta en el hilo de eventos.
            System.out.println("doInBackground() esta en el hilo "
                    + Thread.currentThread().getName());
            System.out.println("primer ESTADO DEL HILO:  " + Thread.currentThread().getState());

            /**
             * ******** Algo de procesamiento costoso **********
             */
            comprimiendo = true;

            File originalDir = new File(rutaOriginal);
            zip = rutaDestino + File.separator + originalDir.getName() + ".zip";
            if (new File(zip).exists()) {
                if (JOptionPane.showConfirmDialog(null,
                        "Ya existe un archivo con el mismo nombre. ¬øQuiere sobreescribirlo?",
                        "Ya estiste un archivo con ese nombre", JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE) != JOptionPane.YES_OPTION) {
                    buttonStopZip.setEnabled(false);
                    return false;
                }
            }
            try {
                List<File> files = getAllFiles(originalDir);

                long size = 0;
                for (File file : files) {
                    size += file.length();
                }

                double currentSize = 0;
                byte[] data = new byte[(int) size];
                origin = null;

                destFolder = new FileOutputStream(zip);

                return compressIt(destFolder, files, (int) size, data, currentSize);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "No se ha podido realizar la compresion",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
                finalizado = false;
            }
            publish();

            return true;
        }

        @Override
        protected void done() {
            if (cancelado == true) {
                return;
            }
            comprimiendo = false;
            finalizado = true;
            buttonStopZip.setEnabled(false);
            buttonStartZip.setEnabled(true);
            loadingBar.setString("");
            JOptionPane.showMessageDialog(null, "Archivo ZIP creado correctamente !",
                    "Finalizado", JOptionPane.INFORMATION_MESSAGE);
        }

        @Override
        protected void process(List<Integer> chunks) {
            loadingBar.setValue(chunks.get(0));
        }

        public void stop() throws IOException {
            cancelado = true;
            origin.close();
            out.close();
            comprimiendo = false;
            buttonStopZip.setEnabled(false);
            loadingBar.setString("");
            try {
                destFolder.close();
                new File(zip).delete();
            } catch (IOException ex) {
            }
        }

        private boolean compressIt(FileOutputStream destFolder, List<File> files,
                int size, byte[] data,
                double currentSize) {
            try {
                out = new ZipOutputStream(new BufferedOutputStream(destFolder));
                for (File file : files) {
                    FileInputStream fi = new FileInputStream(file.getAbsolutePath());
                    origin = new BufferedInputStream(fi, size);
                    ZipEntry entry = new ZipEntry(getDirPath(file.getAbsolutePath(), rutaOriginal));
                    out.putNextEntry(entry);
                    int count;
                    while ((count = origin.read(data, 0, size)) != -1) {
                        out.write(data, 0, count);
                        currentSize += count;
                        publish((int) (100 * currentSize / size));
                        if (!comprimiendo) {
                            return false;
                        }
                    }
                    origin.close();
                }
                out.close();
                return true;
            } catch (IOException ex) {
                if (!comprimiendo) {
                    JOptionPane.showMessageDialog(null,
                            "Se ha cancelado el proceso de compresi√≥n.",
                            "Cancelado", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null,
                            "Se ha producido un error en la compresi√≥n de la carpeta.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            return false;
        }
    }
}
